# ÔºÅÔºÅÔºÅimportentÔºÅÔºÅÔºÅ ÂºÄÂêØ24 bit color ÂÖ∂‰ªñÊñπÂºèÈÉΩÊó†Êïà
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"

# config status bar
# color
set -g status-bg black
set -g status-fg white
# justify
set-option -g status-justify centre
# left
set-option -g status-left "#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]" # :: üíé #(rbenv version | awk '{print $1}')"
# set-option -g status-left-length 20
# windows list
setw -g automatic-rename on
set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'
set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'
# right
# set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d#[fg=green]]'
set -g status-right "#[fg=blue]#I:#P #[fg=yellow]#[fg=green]:: #(date '+%Y-%m-%d')"
# esc delayed
set -g escape-time 10

# set prefix to 's'
set -g prefix ^s
unbind ^b

# set window num from 1
set -g base-index 1
setw -g pane-base-index 1

# Copy and paste like vim
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# getting tmux to copy a buffer to system clipboard
# set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
# bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy" \; display-message "Copied tmux buffer to system clipboard"
# bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
# start selecting text typing 'v' key (once you are in copy mode)
# bind-key -t vi-copy v begin-selection
# # copy selected text to the system's clipboard
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy" \; display-message "Copied"

# split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
unbind '"'
unbind %
unbind s
bind s split-window -v
bind S split-window -v -l 40
bind v split-window -h
bind V split-window -h -l 120

# navigate panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -T root C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind-key -T root C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind-key -T root C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind-key -T root C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind-key -T root C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind-key -T root C-] next-window

# resize panes like vim
bind < resize-pane -L 10
bind L resize-pane -L 100
bind > resize-pane -R 10
bind R resize-pane -R 100
bind - resize-pane -D 5
bind D resize-pane -D 36
bind + resize-pane -U 5
bind U resize-pane -U 35

# swap panes
bind ^u swapp -U
bind ^d swapp -D

bind q killp

# Maximize and restore a pane
unbind m
bind m new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
bind u last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

bind r source-file ~/.tmux.conf \; display "Configuration Reloaded!"

set-option -g history-limit 10000
